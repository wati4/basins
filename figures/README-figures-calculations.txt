Description of computations, data and files for figures and
computations in text

Description organized by figures, tables and then text.

Complete list of files in this subdirectory appears at end of this file.

===================================================

Figures and Tables

Note: in general figures are generated by code in figure-x.m, running
the command figure[x, i] where i = 1 for (a) etc.

8/2/25: ** Important Note **:  A new figure 1 was added in the final
stages of preparation of the manuscript.  So all figure numbers here
are off by 1 (e.g. the description of figure 1 here is actually figure
2 in the manuscript, etc.)

---------------------------Figure 1--------------------

Figure 1a: generated by file figure-1a.m.  Computation to produce
 is described in examples-1.txt

Figure 1b: generated by file  figure-1b.m.
 Data for first two solutions produced by running julia code niches.jl
  with parameters 200 50
Example: confirming stability of first solution:

In[1]:= << ../basins.m

In[2]:= stable[matrix[200, 50], {5, 10, 15, 21, 27, 33, 39, 45, 51, 57, 63, 69, 74, 79, 85, 91, 96, 101, 
 106, 112, 118, 123, 128, 134, 139, 144, 149, 154, 160, 166, 172, 177, 182, 
 188, 194, 200}]

Out[2]= True


---------------------------Figure 2--------------------

figure-2.m: produces figures.

2 (a, b) based on purely analytic data

-----------2c--------------

2c: blue curve based on geometric analytic calculation (in code)
  red dots based on numerical simulations

For numerical simulations:

dynamics-random-4.jl: runs simulations  for monodominant model with a_1 = 1-v, 
 arguments S, v, #runs, index

Data produced by julia code: 800 runs, each 50,000 trials (40M
simulations total).  
1/a_1 ranging from 0.05 - 2 (40 values) each run 20* (1M runs/value)
Example of submission file for running on cluster:
submit-dynamics-r7 (submit 800 jobs to cluster)

Output files are concatenated, transformed to mathematica form by
replacing [] -> {}, etc.

results-7.m: Results of 3-species monodominant simulations with
varying a in mathematica format.

single.m: mathematica code to compile data, produces input for graph.

% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[1]:= << results-7.m

Out[1]= {{0, 25087, 24913, 0}}

In[2]:= << single.m

In[4]:= N[combining[ratios[indices[800]]]]

Out[4]= {{0.05, 0.}, {0.1, 0.}, {0.15, 0.}, {0.2, 0.}, {0.25, 0.}, {0.3, 0.}, 
 
>    {0.35, 0.}, {0.4, 0.}, {0.45, 0.}, {0.5, 0.}, {0.55, 0.0203263}, 
 
>    {0.6, 0.0639874}, {0.65, 0.112321}, {0.7, 0.158141}, {0.75, 0.199273}, 
 
>    {0.8, 0.233229}, {0.85, 0.264653}, {0.9, 0.28964}, {0.95, 0.313305}, 
 
>    {1., 0.333517}, {1.05, 0.350357}, {1.1, 0.365737}, {1.15, 0.379071}, 
 
>    {1.2, 0.389713}, {1.25, 0.400905}, {1.3, 0.40849}, {1.35, 0.419402}, 
 
>    {1.4, 0.42966}, {1.45, 0.435073}, {1.5, 0.44172}, {1.55, 0.448895}, 
 
>    {1.6, 0.454887}, {1.65, 0.458823}, {1.7, 0.463461}, {1.75, 0.467905}, 
 
>    {1.8, 0.472199}, {1.85, 0.476769}, {1.9, 0.480339}, {1.95, 0.482476}, 
 
>    {2., 0.486614}}
this is data for graph.
-----2d--------

Black dots generated similarly to S= 3 data above.

Again uses julia code dynamics-random-4.jl

Submit script: submit-dynamics-r5
 800 jobs: 1/a_1 ranging from 0.05 - 2 (40 values) each run 20*5000 times
 (10^5 runs/value)

results in results-5a, combined into data[20] for black dots similar
to above.

For red, blue dots:

Julia code: uses dynamics-5.jl, arguments: S sigma #runs index
submit file: submit-r6c
 does 20*100k runs for each sigma from 0.02 through 0.2.
results: results-r6c.m (mathematica format)

Processed by: diagonal.m

Produces cx-20.m, which has data for sigma = 0.08, 0.2

Example: producing data for sigma = 0.08 (cx3 in cx-20.m)

% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[1]:= << results-r6c.m

Out[1]= {{5452, 4657, 4625, 5603, 4894, 4674, 5614, 4571, 5162, 4823, 5656, 
 
>     5140, 5182, 4564, 4566, 4789, 5069, 5076, 5221, 4657, 5}}

In[2]:= << diagonal.m

In[3]:= ii = indices[];

In[4]:= collection[ii, 3]

Out[4]= {{1.0628, 5854}, {0.948476, 3620}, {1.06535, 6049}, {1.09441, 6582}, 
 
>    {0.95905, 3820}, {1.15073, 7677}, {1.08785, 6201}, {0.958032, 3879}, 
...

------------2e------------

For variety we used mathematica here to simulate dynamics.

Uses file: dynamics.m (dependent on ../basins.m)

Code to generate data: diagonal-20.m.  experiment[1, 100000] produces
results tally-diagonal-20.m (data used in figure-2)

Example run with 100 simulations:


% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[1]:= << diagonal-20.m

In[5]:= experiment[1, 100]

(* produces last data set in tally-diagonal-20.m *)

---------------------------Table 1--------------------

table-1.m generates and organizes some data for table.

Biomass B (total and numerics for solution) computed using energy
function in basins.m (see examples-1.m for examples)

Probability computations:

p%:

computed using 100 runs of niches.jl with arguments 
 niches.jl 30 7.5 100000 $(Process)
(10^7 total runs.)

p'%:

niches-ci.jl: allows argument giving scale of initial conditions

Similarly computed using 100 runs of niches-ci.jl with arguments
 niches-ci.jl 30 7.5 10000 0.137908 $(Process)

batch submit file: submit-niches-i2
results file: output-i2b.m

p''%:


niches-cu.jl: uses uniform initial conditions

Similarly computed using 100 runs of niches-cu.jl with arguments
 niches-cu.jl 30 7.5 10000 $(Process)

batch submit file: submit-niches-i3
results file: output-i3b.m

function stats[types, hits] in table-1.m computes probability and
uncertainty from data

Example:

% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[2]:= << table-1.m

In[3]:= << output-i3b.m

In[4]:= stats[types, hits]

                                                   -6
Out[4]= {{{4, 5, 5, 5, 6, 5}, 0.0043472, 7.31814 10  }, 
 
>    {{6, 6, 6, 6, 6}, 0.0505242, 0.0000766029}, 
 
                                               -6
>    {{1, 6, 6, 5, 6, 6}, 0.0012779, 6.40028 10  }, 
 
                                               -6
>    {{3, 5, 5, 6, 6, 5}, 0.0008773, 3.72183 10  }, 
 
>    {{5, 5, 5, 5, 5, 5}, 0.0443058, 0.0000830551}, 
 
                                               -6
>    {{4, 4, 5, 6, 6, 5}, 0.0012261, 6.27429 10  }, 
 
                                                -6
>    {{4, 5, 5, 6, 5, 5}, 0.00288893, 9.37826 10  }, 
 
                                       -7            -7
>    {{4, 4, 4, 4, 4, 5, 5}, 5.66667 10  , 1.37436 10  }}

This output corresponds to the last column in table 1.


---------------------------Figure 3--------------------

figure-3.m produces figures

---3 (a)-----

Data in variable sdata from runs at S= 30, 60, 90, with L = 7.5

Number of spikes computed by code spikes.m

Raw data from usual julia code.  Output in mathematica format from 60,
90 in output-2.m, output-3.m.

Example of computing numbers of spikes for S= 60:


% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[1]:= << spikes.m

In[2]:= << output-2.m

Out[2]= {29787, 11911, 14851, 19470, 4488, 17061, 1845, 89, 181, 47, 70, 82, 
 
>    79, 3, 10, 5, 3, 1, 1, 5, 1, 1, 1, 1, 2, 1, 2, 1, 1}

In[5]:= << ../basins.m

In[8]:= N[normalize[spikes]]

Out[8]= {0., 0., 0., 0., 0.36179, 0.6382, 0.00001, 0., 0., 0., 0., 0.}

Reproduces data for S= 60 in file figure-3.m

-------(b, c)--------------

Uses limit.m code to analyze data in compile-c-4.m to produce figures.

results4 in compile-c-4.m contains results of running 1000 simulations
at S= 101 at values of L = 5, 5.5, ..., 14.5 (using usual julia code),
and computing numbers of spikes.  Format is, for each run a set of
{#spikes, gaps, #realized}



---------------------------Figure 4--------------------

Results computed analytically, code in figure-4.m.

---------------------------Figure 5--------------------

Code for this figure is in figure-5.m.

-----(a)--------------

Data from S= 30 with \Delta = 4 from usual simulations, in format

{Lyapunov value (-B), (irrelevant value), sequence}

Checking for first line:


In[1]:= << ../basins.m

In[2]:= energy[matrix[30, 7.5], configuration[{6, 6, 6, 6, 6}]]

Out[2]= {-4.93749, {0.987499, 0.987499, 0.987499, 0.987499, 0.987499}}

confirms biomass of this example.

numbers = frequencies from 10^7 runs at size 30

---------- (b)-----------
Data from S= 50 with \Delta = 4 from usual simulations (10^7), in format

{Lyapunov value (-B), -ln p, sequence}
----------(c)-----------

randomdata in form {biomass, -ln p} computed from a specific example
of a random matrix 

random matrix is in m9.m

(produced by code in random.m.)

Results of 200000 runs using julia code dynamics-m9.jl are in
results-3.m (mathematica format, each entry is a list of species in
resulting stable equilibrium)

file scratch-m9.txt describes production of data in variable randomdata
as binned frequency data from results-3.m.


---------------------------Figure A1--------------------

figure-a1.m produces figures, all analytic no computed data.

---------------------------Figure A2--------------------



------(a)------

This relies on weightsmodel derived using model.m, for simulations
with S= 30, 60, 90, models are in file wm2.m

-------(b)------

Uses weightsmodels for k = 1-6, in file w90.m

------(c)-----------

all-solutions.m contains output generated by solutions[r4, n] from n =
20-90, as described in examples-3.txt.  This is all solutions
generated by model.  Data in logtable is derived in all-solutions.m
from this raw output data.  Used in figure.

---------------------------Figure A3--------------------

figure-a3.m

This figure uses the set of all solutions along with predicted
probability from model.m.  Data is in file all-solutions-p.m, which
was produced from all-solutions.m using process-all.m.

---------------------------Figure A4--------------------

figure-a4.m

Uses:
../model.m: model code
60-all.m: all s= 60 solutions with predicted probabilities 
 (as above from e.g. all-solutions-p.m)
60-sorted.m: all observed s= 60 solutions with observed probabilities
 (as above from simulation)
../basins.m: basic code for solutions

Merges and plots.
---------------------------Figure A5--------------------

figure-a5.m

Uses cs-60.m: compiled information on s= 60 solutions, formatted
slightly differently from above; computed from cx-60.m

Includes all predicted solutions, with observed probability = 0 if not
seen in simulations.  Just reorganized slightly from preceding versions.
========================================================
Computations in text:

----------------------------- Results section-------------------

------------ niche systems-------

Analysis of all possible equilibria at size S, \Delta = 4:

systematic[n] in basins.m compute all stable equilibria at size n

output in systematic-sequences.m up to size 29, 30 in table.

----continuum limit-----

Assertion that e.g. 44444444 is a good stable equilibrium at S= 32:
Example, check using basins.m

% math
Mathematica 11.1.1 Kernel for Linux x86 (64-bit)
Copyright 1988-2017 Wolfram Research, Inc.

In[1]:= << basins.m

In[2]:= stable[matrix[32, 8], configuration[{4, 4, 4, 4, 4, 4, 4, 4}]]

Out[2]= True

-----------domain sizes in the statistical mechanical limit---------

Computations for model e.g. (11, 12) are carried out as in file
examples-3.m, using model in file m4-90.m.

---------------------------Appendix------------------

--------Details of statistical model and matching numerical results-----

Some of this is already described in examples-3.txt, such as equation
(A26).

The calculations here can mostly be reproduced using model.m code
described there.

As further examples, we can compute (A27)


In[1]:= << model.m

In[2]:= << m4-90.m

In[3]:= gapsize[m4[[1]]]

Out[3]= 5.29408

In[4]:= entropy[m4, w4, 3]

Out[4]= 0.749373

We can check that average gap size with unit weights matches (A28),
and is independent of index i


In[8]:= averagegap1[1, 4, w4]

Out[8]= 4.84728

In[9]:= averagegap1[2, 4, w4]

Out[9]= 4.84728

And we can reproduce the first term in (A28)


In[10]:= wentropy[4, w4]

Out[10]= -1.25194
============================================================

Full list of files in this subdirectory, more details on each file and
usage in context of figures etc. above:

60-all.m: list of all S= 60 solutions compatible with k = 4 model from
S= 90 simulation data, solutions in canonical gap format, followed by
(log of) predicted probabilities; script to produce contained in file.
(see figure a4)

60-sorted.m: all observed s= 60 solutions with observed frequencies
(standard "gaps" format) (a4)

all-solutions.m: list of all S= 20--90 solutions compatible with k = 4
model from S= 90 simulation data,  in canonical gap format (figures
a2, a3)

all-solutions-p.m: all solutions above with probabilities (see figure a3)

binned.m: mathematica code to bin results (figure 5c)

compile-c-4.m: results of julia simulations at S= 101, various L (see
figure 3); format {spikes, gaps, frequency}

continuum-slopes.pdf: part of figure 3 produced by figure 3 code

cs-60.m: data on all S= 60 solutions, probabilities and biomass, format:   
{prediction, measured, configuration, biomass} (A5)

cx-20.m: data from runs at S= 20, monodominant model, with  sigma =
0.08, 0.2 (cx3, cx9).  Used in figure 2d.  format: {P_1, frequency}

cx-60.m: data on all S= 60 solutions, probabilities, format:   
{prediction, measured, configuration}(A5)

diagonal-20.m: mathematica code to set up a monodominant S= 20 matrix
with equally spaced a_i (figure 2e)

diagonal.m: mathematica code to set up a monodominant model with a_1
varying, other a_i = 1 (figure 2d)

dynamics-5.jl: julia code to simulate monodominant model with gaussian
random diagonal elements (figure 2d)

dynamics-m9.jl:  julia code to simulate with random matrix interaction
(figure 5c)

dynamics.m: mathematica code to run simulations (figure 2e)

dynamics-random-4.jl: julia code to run monodominant simulations with a_1
varying, other a_i = 1 (figure 2c, 2d)

figure-x.m: mathematica code to generate Figure x.  Includes:

figure-1a.m
figure-1b.m
figure-2.m
figure-3.m
figure-4.m
figure-5.m
figure-a1.m
figure-a2.m
figure-a3.m
figure-a4.m
figure-a5.m

figure-x.pdf: figure generated by code

limit.m: mathematica code to analyze data from compile-c-4.m for
continuum limit (figure 3b, c)

m9.m: instance of random matrix used in figure 5 (mathematica matrix format)

niches-ci.jl: julia code to simulate  niche model with different
scale for initial conditions (table 1)

niches-cu.jl: julia code to simulate  niche model with uniform initial
conditions in a box (table 1)

output-2.m: mathematica (types/hits format) data, results from runs
with S= 60, L = 7.5 (figure 3a)

output-3.m: mathematica (types/hits format) data, results from runs
with S= 90, L = 7.5 (figure 3a)

output-i2b.m:  mathematica (types/hits) data, results from
niches-ci.jl (Table 1)

output-i3b.m: mathematica (types/hits) data, results from
niches-cu.jl (Table 1)

process-all.m: mathematica code to compute predicted probability for
solutions in all-solutions.m (a3)

random.m: mathematica code to work with random matrices

README-figures-calculations.txt: this file

results-3.m: results of julia simulations of random matrix m9.m,
mathematica format results are in form of a list of solutions, each
solution is a list of remaining species.

results-5a:  results of julia code for S= 20 monodominant model with
different values of a_1 (figure 2d) (format: matrix[i], results[i] =
list of frequencies of each  species i dominating, last entry is if
simulation does not converge properly to a single species)

results-7.m: results of julia code for S= 3 monodominant model with
different values of a_1 (figure 2c) (mathematica version of same
format as results-5a)

results-r6c.m: mathematica format of results for S= 20 monodominant
model with gaussian diagonal elements (figure 2d)

scratch-m9.txt: log of math shell  commands to produce binned data for
figure 5c.

single.m:  mathematica code to compile data for figure 2c

slopes.pdf: part of figure 3 produced by figure 3 code

spikes.m: mathematica code to compute number of spikes in a niche
model solution (combines adjacent species into a single spike) (figure
3)

submit-dynamics-r5:  commands to submit dynamics-random-4.jl for
batch processing (2d)

submit-dynamics-r7:  commands to submit dynamics-r7 for
batch processing (2c)

submit-niches-i2:  commands to submit niches-ci for
batch processing (table 1)

submit-niches-i3:  commands to submit niches-cu for
batch processing (table 1)

submit-r6c:  commands to submit dynamics-5.jl for
batch processing (2d)

systematic-sequences.m:  list of all possible solutions at S<
30,\Delta = 4, produced by code in basins.m (referenced above in
discussion of niche systems/results section)

table-1.m: mathematica code to produce various data for table 1

tally-diagonal-20.m: results of running code from diagonal-20.m
(figure 2e) to produce frequencies of different solutions for S= 20
model with equally spaced a (format: {i, frequency}, where i is an
index into allowed a's)

w90.m: weight models ("model" format) for S= 90 data, k = 1 through 6
(list of model formats for k = 1, ..., 6) (Figure a2b)

wm2.m: weights models (model format) for S= 30, 60, 90, \Delta= 4
(Figure a2a)
